// Code generated by awsgen from api version 2010-05-08. DO NOT EDIT.

package iam

import "time"

// VirtualMFADevice manages AWS Identity and Access Management
// VirtualMFADevices.
type VirtualMFADevice struct {
	//  The path for the virtual MFA device. For more information about paths,
	// see IAM Identifiers:
	// https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html
	// in the IAM User Guide.This parameter is optional. If it is not included,
	// it defaults to a slash (/).This parameter allows (through its regex
	// pattern) a string of characters consisting of either a forward slash (/)
	// by itself or a string that must begin and end with forward slashes. In
	// addition, it can contain any ASCII character from the ! (\u0021) through
	// the DEL character (\u007F), including most punctuation characters,
	// digits, and upper and lowercased letters.
	Path *string `input:"path"`

	// The name of the virtual MFA device. Use with path to uniquely identify a
	// virtual MFA device.This parameter allows (through its regex pattern) a
	// string of characters consisting of upper and lowercase alphanumeric
	// characters with no spaces. You can also include any of the following
	// characters: _+=,.@-
	VirtualMFADeviceName string `input:"virtual_mfa_device_name"`

	// Outputs:

	// A structure containing details about the new virtual MFA device.
	VirtualMFADevice struct {
		//  The base32 seed defined as specified in RFC3548. The Base32StringSeed
		// is base64-encoded.
		Base32StringSeed []byte `output:"base32_string_seed"`

		// The date and time on which the virtual MFA device was enabled.
		EnableDate *time.Time `output:"enable_date"`

		//  A QR code PNG image that encodes
		// otpauth://totp/$virtualMFADeviceName@$AccountName?secret=$Base32String
		// where $virtualMFADeviceName is one of the create call arguments.
		// AccountName is the user name if set (otherwise, the account ID
		// otherwise), and Base32String is the seed in base32 format. The
		// Base32String value is base64-encoded.
		QRCodePNG []byte `output:"qr_code_png"`

		// The serial number associated with VirtualMFADevice.
		SerialNumber string `output:"serial_number"`

		// The IAM user associated with this virtual MFA device.
		User *struct {
			// The Amazon Resource Name (ARN) that identifies the user. For more
			// information about ARNs and how to use ARNs in policies, see IAM
			// Identifiers:
			// https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html
			// in the IAM User Guide.
			ARN string `json:"Arn" output:"arn"`

			// The date and time, in ISO 8601 date-time format, when the user was
			// created.
			CreateDate time.Time `output:"create_date"`

			// The date and time, in ISO 8601 date-time format, when the user's password was last used to sign in to an
			// AWS website. For a list of AWS websites that capture a user's last sign-in time, see the Credential
			// Reports topic in the IAM User Guide. If a password is used more than once in a five-minute span, only the
			// first use is returned in this field. If the field is null (no value), then it indicates that they never
			// signed in with a password. This can be because:  The user never had a password.
			//   A password exists but has not been used since IAM started tracking this information on October 20, 2014.
			//
			// A null value does not mean that the user never had a password. Also, if the user does not currently have a
			// password but had one in the past, then this field contains the date and time the most recent password was
			// used.This value is returned only in the GetUser and ListUsers operations.
			PasswordLastUsed *time.Time `output:"password_last_used"`

			// The path to the user. For more information about paths, see IAM
			// Identifiers:
			// https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html
			// in the IAM User Guide.
			Path string `output:"path"`

			// The ARN of the policy used to set the permissions boundary for the
			// user.For more information about permissions boundaries, see Permissions
			// Boundaries for IAM Identities :
			// https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html
			// in the IAM User Guide.
			PermissionsBoundary *struct {
				//  The ARN of the policy used to set the permissions boundary for the user
				// or role.
				PermissionsBoundaryARN *string `json:"PermissionsBoundaryArn" output:"permissions_boundary_arn"`

				//  The permissions boundary usage type that indicates what type of IAM
				// resource is used as the permissions boundary for an entity. This data
				// type can only have a value of Policy.
				PermissionsBoundaryType *string `output:"permissions_boundary_type"`
			} `output:"permissions_boundary"`

			// A list of tags that are associated with the specified user. For more
			// information about tagging, see Tagging IAM Identities:
			// https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html in the IAM
			// User Guide.
			Tags []struct {
				// The key name that can be used to look up or retrieve the associated
				// value. For example, Department or Cost Center are common choices.
				Key string `output:"key"`

				// The value associated with this tag. For example, tags with a key name of
				// Department could have values such as Human Resources, Accounting, and
				// Support. Tags with a key name of Cost Center might have values that
				// consist of the number associated with the different cost centers in your
				// company. Typically, many resources have tags with the same key name but
				// with different values.AWS always interprets the tag Value as a single
				// string. If you need to store an array, you can store comma-separated
				// values in the string. However, you must interpret the value in your
				// code.
				Value string `output:"value"`
			} `output:"tags"`

			// The stable and unique string identifying the user. For more information
			// about IDs, see IAM Identifiers:
			// https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html
			// in the IAM User Guide.
			UserID string `json:"UserId" output:"user_id"`

			// The friendly name identifying the user.
			UserName string `output:"user_name"`
		} `output:"user"`
	} `output:"virtual_mfa_device"`
}
